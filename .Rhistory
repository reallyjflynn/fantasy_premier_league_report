difficulty = estimate - ave_difficulty)
df %>%
right_join(model %>%
top_n(n = -5, estimate) %>%
select(team)) %>%
mutate(ave_diff = mean(overall_strength),
difficulty = overall_strength - ave_diff) %>%
ggplot(aes(x = date, difficulty,
color = team)) +
geom_smooth(se = FALSE) +
geom_vline(xintercept = Sys.Date()) +
facet_wrap(~team) +
theme_minimal() +
scale_y_continuous(labels = comma) +
scale_color_viridis_d() +
labs(title = 'Opposition Difficulty Predicted',
subtitle = 'Teams With the Best Fixtures for the rest of the season',
x = '', y = 'Opposition Strength',
color = '5 Teams Best Schedules')
df %>%
right_join(model %>%
top_n(n = 5, estimate) %>%
select(team)) %>%
mutate(ave_diff = mean(overall_strength),
difficulty = overall_strength - ave_diff) %>%
ggplot(aes(x = date, difficulty,
color = team)) +
geom_smooth(se = FALSE) +
geom_vline(xintercept = Sys.Date()) +
facet_wrap(~team) +
theme_minimal() +
scale_y_continuous(labels = comma) +
scale_color_viridis_d() +
labs(title = 'Opposition Difficulty Predicted',
subtitle = 'Teams With the Worst Fixtures Over the next 30 days',
x = '', y = 'Opposition Strength',
color = '5 Teams Worst Schedules')
model %>%
select(team, estimate) %>%
arrange(estimate) %>%
mutate(estimate = round(estimate * -1, digits = 5)) %>%
kable()
# Chunk 7
the_best <- rbind(
players %>%
filter(position == 'Goalkeeper') %>%
top_n(5, total_points),
players %>%
filter(position == 'Defender') %>%
top_n(25, total_points),
players %>%
filter(position == 'Midfielder') %>%
top_n(40, total_points),
players %>%
filter(position == 'Forward') %>%
top_n(25, total_points))
df <- fpl_get_player_detailed(the_best$id[1])$history %>%
select(attempted_passes, completed_passes,
errors_leading_to_goal, errors_leading_to_goal_attempt,
open_play_crosses, big_chances_created,
clearances_blocks_interceptions, recoveries,
key_passes, tackles, goals_scored, assists,
clean_sheets, goals_conceded, transfers_in,
transfers_out, dribbles, selected, total_points,
value, kickoff_time) %>%
mutate(player_id = the_best$id[1])
for(i in 2:nrow(the_best)) {
df <- rbind(df,
fpl_get_player_detailed(the_best$id[i])$history %>%
select(attempted_passes, completed_passes,
errors_leading_to_goal,
errors_leading_to_goal_attempt,
open_play_crosses, big_chances_created,
clearances_blocks_interceptions, recoveries,
key_passes, tackles, goals_scored, assists,
clean_sheets, goals_conceded, transfers_in,
transfers_out, dribbles, selected, total_points,
value, kickoff_time) %>%
mutate(player_id = the_best$id[i]))
}
by_player <- df %>%
mutate(kickoff_date = as.Date(kickoff_time, format = '%Y-%m-%d')) %>%
group_by(player_id) %>%
nest()
form <- function(df) {
MASS::rlm(total_points ~ kickoff_date, data = df)
}
player_form <- by_player %>%
mutate(model = map(data, form),
tidy = map(model, broom::tidy))
model <- player_form %>%
unnest(tidy) %>%
filter(term == 'kickoff_date')
player_form <- left_join(model, players %>%
select(id, web_name, minutes, position),
by = c('player_id' = 'id'))
player_form %>%
filter(minutes > (8 * 90)) %>%
group_by(position) %>%
top_n(5, wt = estimate) %>%
arrange(desc(estimate), .by_group = TRUE) %>%
ungroup() %>%
select(web_name, position, estimate, std.error, minutes) %>%
kable()
player_form %>%
filter(minutes > (8 * 90)) %>%
group_by(position) %>%
top_n(-5, wt = estimate) %>%
arrange(desc(estimate), .by_group = TRUE) %>%
ungroup() %>%
select(web_name, position, estimate, std.error, minutes) %>%
kable()
# Chunk 8
fixtures_new <- fixtures %>%
mutate(week = as.Date(deadline_time, format = '%Y-%m-%d'),
team_h = as.factor(team_h),
team_a = as.factor(team_a)) %>%
select(team_h, team_a, team_h_score, team_a_score, finished, week)
played <- fixtures_new %>%
filter(finished == TRUE) %>%
select(-finished)
unplayed <- fixtures_new %>%
filter(finished == FALSE) %>%
select(-finished)
model <- dixoncoles(team_h_score, team_a_score, team_h, team_a,
data = played)
# Chunk 9
match_probabilities <- broom::augment(
model, unplayed,
type.predict = "outcomes") %>%
unnest() %>%
spread(outcome, prob) %>%
select(-team_h_score, -team_a_score)
# match_probabilities
# Chunk 10
team_parameters <- broom::tidy(model) %>%
filter(parameter %in% c("off", "def")) %>%
mutate(value = exp(value)) %>%
spread(parameter, value)
team_parameters %>%
ggplot(aes(x = (-1 * def), y = off)) +
geom_point(alpha = 0.5) +
ggrepel::geom_text_repel(aes(label = team)) +
theme_minimal() +
labs(title = "Team Strength Estimates",
y = "Attack",
x = "Defence")
# Chunk 11
unplayed_scorelines <- broom::augment(
model, unplayed, type.predict = "scorelines") %>%
unnest() %>%
select(-team_h_score, -team_a_score)
# unplayed_scorelines
unplayed_scorelines %>%
filter(week == "2019-03-30") -> t
t %>% ggplot(aes(prob)) + geom_histogram()
unplayed_scorelines %>%
filter(week == "2019-03-30") %>%
group_by(team_h, team_a) %>%
filter(prob == max(prob),
var = var(prob)) -> t
Sample data set
set.seed(1)
Defect_A = sample(1:30, 10, replace=TRUE)
Defect_B = sample(1:30, 10, replace=TRUE)
Defect_C = sample(1:30, 10, replace=TRUE)
Defect_D = sample(1:30, 10, replace=TRUE)
Defect_E = sample(1:30, 10, replace=TRUE)
test<-data.frame(cbind(Defect_A, Defect_B, Defect_C, Defect_D, Defect_E))
test
# Conditions
any <- c(1,2,3,4) # for condition 1
any_2 <- c(5,6,7,8) # for conditions 2 and 3
any_2_plus <- c(9,10,11,12,13) # for condition 3
any_3 <- c(14,15,16,17,18) # for condition 4
test <- test %>%
mutate(case = row_number())
library(tidyverse)
test <- test %>%
mutate(case = row_number())
test <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case)
View(test)
'%!in%' <- Negate('%in%')
test <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
group_by(case) %>%
mutate(
conditionone = case_when(val %in% any ~ conjoined)
conditionone = case_when(val %!in% any ~ 'not conjoined'))
test <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
group_by(case) %>%
mutate(
conditionone = case_when(val %in% any ~ conjoined),
conditionone = case_when(val %!in% any ~ 'not conjoined'))
test <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
group_by(case) %>%
mutate(
conditionone = case_when(val %in% any ~ 'conjoined'),
conditionone = case_when(val %!in% any ~ 'not conjoined'))
View(test)
library(tidyverse)
'%!in%' <- Negate('%in%')
Sample data set
set.seed(1)
Defect_A = sample(1:30, 10, replace=TRUE)
Defect_B = sample(1:30, 10, replace=TRUE)
Defect_C = sample(1:30, 10, replace=TRUE)
Defect_D = sample(1:30, 10, replace=TRUE)
Defect_E = sample(1:30, 10, replace=TRUE)
test < -data.frame(cbind(Defect_A, Defect_B, Defect_C, Defect_D, Defect_E))
test
# Conditions
any <- c(1,2,3,4) # for condition 1
any_2 <- c(5,6,7,8) # for conditions 2 and 3
any_2_plus <- c(9,10,11,12,13) # for condition 3
any_3 <- c(14,15,16,17,18) # for condition 4
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
group_by(case) %>%
mutate(
conditionone = case_when(val %in% any ~ 'conjoined'),
conditionone = case_when(val %!in% any ~ 'not conjoined'))
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(
conditionone = case_when(val %in% any ~ 'conjoined'),
conditionone = case_when(val %!in% any ~ 'not conjoined'))
library(tidyverse)
'%!in%' <- Negate('%in%')
Sample data set
set.seed(1)
Defect_A = sample(1:30, 10, replace=TRUE)
Defect_B = sample(1:30, 10, replace=TRUE)
Defect_C = sample(1:30, 10, replace=TRUE)
Defect_D = sample(1:30, 10, replace=TRUE)
Defect_E = sample(1:30, 10, replace=TRUE)
test < -data.frame(cbind(Defect_A, Defect_B, Defect_C, Defect_D, Defect_E))
test
# Conditions
any <- c(1,2,3,4) # for condition 1
any_2 <- c(5,6,7,8) # for conditions 2 and 3
any_2_plus <- c(9,10,11,12,13) # for condition 3
any_3 <- c(14,15,16,17,18) # for condition 4
test_new <- test %>%
mutate(case = row_number())
library(tidyverse)
'%!in%' <- Negate('%in%')
Sample data set
set.seed(1)
Defect_A = sample(1:30, 10, replace=TRUE)
Defect_B = sample(1:30, 10, replace=TRUE)
Defect_C = sample(1:30, 10, replace=TRUE)
Defect_D = sample(1:30, 10, replace=TRUE)
Defect_E = sample(1:30, 10, replace=TRUE)
test <- data.frame(cbind(Defect_A, Defect_B, Defect_C, Defect_D, Defect_E))
test
# Conditions
any <- c(1,2,3,4) # for condition 1
any_2 <- c(5,6,7,8) # for conditions 2 and 3
any_2_plus <- c(9,10,11,12,13) # for condition 3
any_3 <- c(14,15,16,17,18) # for condition 4
test_new <- test %>%
mutate(case = row_number())
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case)
View(test_new)
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(
conditionone = case_when(val %in% any ~ 'conjoined'),
conditionone = case_when(val %!in% any ~ 'not conjoined'))
View(test_new)
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(
conditionone = case_when(val %!in% any ~ 'not conjoined'),
conditionone = case_when(val %in% any ~ 'conjoined'))
View(test_new)
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(case_one = val %in% any,
case_two = val %in% any_2,
case_three = val %in% any_3,
case_found = val %in% any_4)
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(case_one = val %in% any,
case_two = val %in% any_2,
case_three = val %in% any_2_plus,
case_found = val %in% any_3)
View(test_new)
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(case_one = val %in% any,
case_two = val %in% any_2,
case_three = val %in% any_2_plus,
case_found = val %in% any_3) %>%
group_by(case) %>%
mutate(condition_one = case_when(
count(case_one) > 0 ~ 'conjoined'),
condition_two = case_when(
count(case_two) > 0 ~ 'spina bifida')))
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(case_one = val %in% any,
case_two = val %in% any_2,
case_three = val %in% any_2_plus,
case_found = val %in% any_3) %>%
group_by(case) %>%
mutate(condition_one = case_when(
count(case_one) > 0 ~ 'conjoined'),
condition_two = case_when(
count(case_two) > 0 ~ 'spina bifida'))
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(case_one = val %in% any,
case_two = val %in% any_2,
case_three = val %in% any_2_plus,
case_found = val %in% any_3)
str(test_new)
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(case_one = val %in% any,
case_two = val %in% any_2,
case_any_2 = val %in% any_2_plus,
case_three = val %in% any_3) %>%
group_by(case) %>%
summarise(case_one = sum(case_one),
case_two = sum(case_two),
case_any_2 = sum(case_any_2),
case_three = sum(case_three)
)
View(test_new)
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(case_one = val %in% any,
case_two = val %in% any_2,
case_any_2 = val %in% any_2_plus,
case_three = val %in% any_3) %>%
group_by(case) %>%
mutate(case_one = sum(case_one),
case_two = sum(case_two),
case_any_2 = sum(case_any_2),
case_three = sum(case_three))
View(test_new)
any
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(case_one = val %in% any,
case_two = val %in% any_2,
case_any_2 = val %in% any_2_plus,
case_three = val %in% any_3) %>%
group_by(case) %>%
summarise(case_one = sum(case_one),
case_two = sum(case_two),
case_any_2 = sum(case_any_2),
case_three = sum(case_three))
View(test_new)
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(case_one = val %in% any,
case_two = val %in% any_2,
case_any_2 = val %in% any_2_plus,
case_three = val %in% any_3) %>%
group_by(case) %>%
summarise(case_one = sum(case_one),
case_two = sum(case_two),
case_any_2 = sum(case_any_2),
case_three = sum(case_three)) %>%
mutate(condition_one = case_when(
case_one >= 1 ~ 'conjoined'),
condition_two = case_when(
case_two >= 2 ~ 'spina bifida'))
View(test_new)
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(case_one = val %in% any,
case_two = val %in% any_2,
case_any_2 = val %in% any_2_plus,
case_three = val %in% any_3) %>%
group_by(case) %>%
summarise(case_one = sum(case_one),
case_two = sum(case_two),
case_two_2 = sum(case_any_2),
case_three = sum(case_three)) %>%
mutate(condition_one = case_when(
case_one >= 1 ~ 'conjoined'),
condition_two = case_when(
case_two >= 2 ~ 'spina bifida'),
condition_two_two = case_when(
case_two >= 1 & case_two_2 >= 1  ~ 'heterodaxy'),
condition_three >= 3 ~ 'vacterl')
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(case_one = val %in% any,
case_two = val %in% any_2,
case_any_2 = val %in% any_2_plus,
case_three = val %in% any_3) %>%
group_by(case) %>%
summarise(case_one = sum(case_one),
case_two = sum(case_two),
case_two_2 = sum(case_any_2),
case_three = sum(case_three)) %>%
mutate(condition_one = case_when(
case_one >= 1 ~ 'conjoined'),
condition_two = case_when(
case_two >= 2 ~ 'spina bifida'),
condition_two_two = case_when(
case_two >= 1 & case_two_2 >= 1  ~ 'heterodaxy'),
condition_three = case_when(
case_three >= 3 ~ 'vacterl'))
View(test_new)
library(tidyverse)
set.seed(1)
Defect_A = sample(1:30, 10, replace=TRUE)
Defect_B = sample(1:30, 10, replace=TRUE)
Defect_C = sample(1:30, 10, replace=TRUE)
Defect_D = sample(1:30, 10, replace=TRUE)
Defect_E = sample(1:30, 10, replace=TRUE)
test <- data.frame(cbind(Defect_A, Defect_B, Defect_C, Defect_D, Defect_E))
test
# Conditions
any <- c(1,2,3,4) # for condition 1
any_2 <- c(5,6,7,8) # for conditions 2 and 3
any_2_plus <- c(9,10,11,12,13) # for condition 3
any_3 <- c(14,15,16,17,18) # for condition 4
test_new <- test %>%
mutate(case = row_number()) %>%
gather(defect, val, -case) %>%
mutate(case_one = val %in% any,
case_two = val %in% any_2,
case_any_2 = val %in% any_2_plus,
case_three = val %in% any_3) %>%
group_by(case) %>%
summarise(case_one = sum(case_one),
case_two = sum(case_two),
case_two_2 = sum(case_any_2),
case_three = sum(case_three)) %>%
mutate(condition_one = case_when(
case_one >= 1 ~ 'conjoined'),
condition_two = case_when(
case_two >= 2 ~ 'spina bifida'),
condition_two_two = case_when(
case_two >= 1 & case_two_2 >= 1  ~ 'heterodaxy'),
condition_three = case_when(
case_three >= 3 ~ 'vacterl'))
View(test_new)
test_new %>% gather(condition, val, -case)
test_new %>%
select(-case_one, -case_two, -case_two_two,
-case_three)
test_new %>%
select(-case_one, -case_two, -case_two_2,
-case_three)
test_new %>%
select(-case_one, -case_two, -case_two_2,
-case_three) %>%
gather(condition, val, -case)
test_new$comments = apply(df,1, function(x) {
ifelse(length(x[x %in% any == TRUE]) >= 1, 'conjoined', ifelse (
length(x[x %in% any_2 == TRUE]) >= 2, 'spina bifida', ifelse (
length(x[x %in% any_2 == TRUE]) >= 1 && length(x[x %in% any_2_plus == TRUE]) >= 1, 'heterodaxy', ifelse (
length(x[x %in% any_3 == TRUE]) >= 3, 'vacterl', 'NA'))))
})
test_new
test$comments = apply(df,1, function(x) {
ifelse(length(x[x %in% any == TRUE]) >= 1, 'conjoined', ifelse (
length(x[x %in% any_2 == TRUE]) >= 2, 'spina bifida', ifelse (
length(x[x %in% any_2 == TRUE]) >= 1 && length(x[x %in% any_2_plus == TRUE]) >= 1, 'heterodaxy', ifelse (
length(x[x %in% any_3 == TRUE]) >= 3, 'vacterl', 'NA'))))
})
# Sample data set
df = data.frame(Defect_A = sample(1:30, 10, replace=TRUE),
Defect_B = sample(1:30, 10, replace=TRUE),
Defect_C = sample(1:30, 10, replace=TRUE),
Defect_D = sample(1:30, 10, replace=TRUE),
Defect_E = sample(1:30, 10, replace=TRUE))
# Conditions
any <- c(1,2,3,4) # for condition 1
any_2 <- c(5,6,7,8) # for conditions 2 and 3
any_2_plus <- c(9,10,11,12,13) # for condition 3
any_3 <- c(14,15,16,17,18) # for condition 4
test$comments = apply(df,1, function(x) {
ifelse(length(x[x %in% any == TRUE]) >= 1, 'conjoined', ifelse (
length(x[x %in% any_2 == TRUE]) >= 2, 'spina bifida', ifelse (
length(x[x %in% any_2 == TRUE]) >= 1 && length(x[x %in% any_2_plus == TRUE]) >= 1, 'heterodaxy', ifelse (
length(x[x %in% any_3 == TRUE]) >= 3, 'vacterl', 'NA'))))
})
View(test)
