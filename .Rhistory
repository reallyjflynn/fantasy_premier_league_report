select('teamid' = id, 'opposition' = name,
strength_overall_home, strength_overall_away) %>%
right_join(fixtures %>%
select('gameid' = id, finished, team_h, 'team' = team_a,
kickoff_time),
by = c('teamid' = 'team_h')) %>%
mutate(cat = 'away',
'overall_strength' = strength_overall_away)
View(away)
home <- teams %>%
select('teamid' = id, 'opposition' = name,
strength_overall_home, strength_overall_away) %>%
right_join(fixtures %>%
select('gameid' = id, finished, 'team' = team_h,
team_a, kickoff_time),
by = c('teamid' = 'team_a')) %>%
mutate(cat = 'home',
'overall_strength' = strength_overall_home)
df <- rbind(home, away) %>%
mutate(date = as.Date(kickoff_time)) %>%
filter(date < Sys.Date() + 30,
date > Sys.Date() - 30)
by_team <- df %>%
group_by(team) %>%
nest()
opp_strength <- function(df) {
lm(overall_strength ~ date, data = df)
}
by_team <- by_team %>%
mutate(model = map(data, opp_strength),
tidy = map(model, broom::tidy))
model <- by_team %>%
unnest(tidy) %>%
filter(term == 'date') %>%
mutate(ave_difficulty = mean(estimate),
difficulty = estimate - ave_difficulty)
df %>%
right_join(model %>%
top_n(n = -5, estimate) %>%
select(team)) %>%
mutate(ave_diff = mean(overall_strength),
difficulty = overall_strength - ave_diff) %>%
ggplot(aes(x = date, difficulty,
color = team)) +
geom_smooth(se = FALSE) +
geom_vline(xintercept = Sys.Date()) +
facet_wrap(~team) +
theme_minimal() +
scale_y_continuous(labels = comma) +
scale_color_viridis_d() +
labs(title = 'Opposition Difficulty Predicted',
subtitle = 'Teams With the Best Fixtures for the rest of the season',
x = '', y = 'Opposition Strength',
color = '5 Teams Best Schedules')
df %>%
right_join(model %>%
top_n(n = -5, estimate) %>%
select(team)) %>%
mutate(ave_diff = mean(overall_strength),
difficulty = overall_strength - ave_diff) %>%
ggplot(aes(x = date, difficulty,
color = team)) +
geom_smooth(se = FALSE) +
geom_vline(xintercept = Sys.Date()) +
facet_wrap(~team) +
theme_minimal() +
scale_y_continuous(labels = comma) +
scale_color_viridis_c() +
labs(title = 'Opposition Difficulty Predicted',
subtitle = 'Teams With the Best Fixtures for the rest of the season',
x = '', y = 'Opposition Strength',
color = '5 Teams Best Schedules')
View(df)
df %>%
right_join(model %>%
top_n(n = 5, estimate) %>%
select(team)) %>%
mutate(ave_diff = mean(overall_strength),
difficulty = overall_strength - ave_diff) %>%
ggplot(aes(x = date, difficulty,
color = team)) +
geom_smooth(se = FALSE) +
geom_vline(xintercept = Sys.Date()) +
facet_wrap(~team) +
theme_minimal() +
scale_y_continuous(labels = comma) +
scale_color_viridis_d() +
labs(title = 'Opposition Difficulty Predicted',
subtitle = 'Teams With the Worst Fixtures Over the next 30 days',
x = '', y = 'Opposition Strength',
color = '5 Teams Worst Schedules')
model %>%
select(team, estimate) %>%
arrange(estimate) %>%
mutate(estimate = round(estimate * -1, digits = 5)) %>%
kable()
the_best <- rbind(
players %>%
filter(position == 'Goalkeeper') %>%
top_n(5, total_points),
players %>%
filter(position == 'Defender') %>%
top_n(25, total_points),
players %>%
filter(position == 'Midfielder') %>%
top_n(40, total_points),
players %>%
filter(position == 'Forward') %>%
top_n(25, total_points))
df <- fpl_get_player_detailed(the_best$id[1])$history %>%
select(attempted_passes, completed_passes,
errors_leading_to_goal, errors_leading_to_goal_attempt,
open_play_crosses, big_chances_created,
clearances_blocks_interceptions, recoveries,
key_passes, tackles, goals_scored, assists,
clean_sheets, goals_conceded, transfers_in,
transfers_out, dribbles, selected, total_points,
value, kickoff_time) %>%
mutate(player_id = the_best$id[1])
fixtures_new <- fixtures %>%
mutate(week = as.Date(deadline_time, format = '%Y-%m-%d'),
team_h = as.factor(team_h),
team_a = as.factor(team_a)) %>%
select(team_h, team_a, team_h_score, team_a_score, finished, week)
glimpse(fixtures)
fixtures_new <- fixtures %>%
mutate(week = as.Date(kickoff_time, format = '%Y-%m-%d'),
team_h = as.factor(team_h),
team_a = as.factor(team_a)) %>%
select(team_h, team_a, team_h_score, team_a_score, finished, week)
played <- fixtures_new %>%
filter(finished == TRUE) %>%
select(-finished)
unplayed <- fixtures_new %>%
filter(finished == FALSE) %>%
select(-finished)
model <- dixoncoles(team_h_score, team_a_score, team_h, team_a,
data = played)
model
match_probabilities <- broom::augment(
model, unplayed,
type.predict = "outcomes") %>%
unnest() %>%
spread(outcome, prob) %>%
select(-team_h_score, -team_a_score)
match_probabilities <- broom::augment(
model, unplayed,
type.predict = "outcomes") %>%
unnest(cols = c(.outcomes)) %>%
spread(outcome, prob) %>%
select(-team_h_score, -team_a_score)
View(match_probabilities)
team_parameters <- broom::tidy(model) %>%
filter(parameter %in% c("off", "def")) %>%
mutate(value = exp(value)) %>%
spread(parameter, value)
team_parameters %>%
ggplot(aes(x = (-1 * def), y = off)) +
geom_point(alpha = 0.5) +
ggrepel::geom_text_repel(aes(label = team)) +
theme_minimal() +
labs(title = "Team Strength Estimates",
y = "Attack",
x = "Defence")
View(teams)
# match_probabilities
match_probabilities <- match_probabilities %>%
left_join(teams %>% select(id, name))
match_probabilities <- match_probabilities %>%
left_join(teams %>% select(id, home_name = name),
by = c('team_h' = 'id'))
match_probabilities <- broom::augment(
model, unplayed,
type.predict = "outcomes") %>%
unnest(cols = c(.outcomes)) %>%
spread(outcome, prob) %>%
select(-team_h_score, -team_a_score) %>%
mutate(team_h = as.character(team_h))
# match_probabilities
match_probabilities <- match_probabilities %>%
left_join(teams %>% select(id, home_name = name),
by = c('team_h' = 'id'))
View(match_probabilities)
match_probabilities <- broom::augment(
model, unplayed,
type.predict = "outcomes") %>%
unnest(cols = c(.outcomes)) %>%
spread(outcome, prob) %>%
select(-team_h_score, -team_a_score) %>%
mutate(team_h = as.integer(team_h))
# match_probabilities
match_probabilities <- match_probabilities %>%
left_join(teams %>% select(id, home_name = name),
by = c('team_h' = 'id'))
View(match_probabilities)
match_probabilities <- match_probabilities %>%
left_join(teams %>% select(id, home_name = name),
by = c('team_h' = 'id')) %>%
left_join(teams %>% select(id, away_name = name),
by = c('team_a' = 'id'))
match_probabilities <- broom::augment(
model, unplayed,
type.predict = "outcomes") %>%
unnest(cols = c(.outcomes)) %>%
spread(outcome, prob) %>%
select(-team_h_score, -team_a_score) %>%
mutate(team_h = as.integer(team_h),
team_a = as.integer(team_a))
match_probabilities <- match_probabilities %>%
left_join(teams %>% select(id, home_name = name),
by = c('team_h' = 'id')) %>%
left_join(teams %>% select(id, away_name = name),
by = c('team_a' = 'id'))
View(match_probabilities)
team_parameters <- broom::tidy(model) %>%
filter(parameter %in% c("off", "def")) %>%
mutate(value = exp(value)) %>%
spread(parameter, value)
View(team_parameters)
team_parameters <- broom::tidy(model) %>%
filter(parameter %in% c("off", "def")) %>%
mutate(value = exp(value))
View(team_parameters)
team_parameters <- broom::tidy(model) %>%
mutate(team = as.integer(team)) %>%
left_join(teams %>% select(id, home_name = name),
by = c('team' = 'id'))
View(team_parameters)
team_parameters <- broom::tidy(model) %>%
mutate(team = as.integer(team)) %>%
left_join(teams %>% select(id, name),
by = c('team' = 'id')) %>%
filter(parameter %in% c("off", "def")) %>%
mutate(value = exp(value)) %>%
spread(parameter, value)
View(team_parameters)
team_parameters %>%
ggplot(aes(x = def, y = off)) +
geom_point(alpha = 0.5) +
ggrepel::geom_text_repel(aes(label = name)) +
theme_minimal() +
labs(title = "Team Strength Estimates",
y = "Attack",
x = "Defence")
team_parameters %>%
ggplot(aes(x = def, y = off)) +
geom_point(alpha = 0.5) +
ggrepel::geom_text_repel(aes(label = name)) +
theme_clean_dark() +
labs(title = "Team Strength Estimates",
y = "Attack",
x = "Defence")
team_parameters %>%
ggplot(aes(x = def, y = off)) +
geom_point(alpha = 0.75, size = 3) +
ggrepel::geom_text_repel(aes(label = name)) +
theme_clean_light() +
labs(title = "Team Strength Estimates",
y = "Attack",
x = "Defence")
team_parameters %>%
ggplot(aes(x = def, y = off)) +
geom_point(alpha = 0.75, size = 3) +
ggrepel::geom_text_repel(aes(label = name)) +
theme_clean_light() +
labs(title = "Team Strength Estimates",
y = "Attack Strength",
x = "Defensive Weakness")
unplayed_scorelines <- broom::augment(
model, unplayed, type.predict = "scorelines") %>%
unnest() %>%
select(-team_h_score, -team_a_score)
unplayed_scorelines <- broom::augment(
model, unplayed, type.predict = "scorelines") %>%
unnest(cols = c(.scorelines)) %>%
select(-team_h_score, -team_a_score)
unplayed_scorelines %>%
filter(week == "2019-04-12") %>%
group_by(team_h, team_a) %>%
filter(prob == max(prob)) %>%
arrange(desc(prob)) %>%
ungroup() %>%
kable()
glimpse(unplayed_scorelines)
unplayed_scorelines <- broom::augment(
model, unplayed, type.predict = "scorelines") %>%
unnest(cols = c(.scorelines)) %>%
select(-team_h_score, -team_a_score) %>%
mutate(team_h = as.character(team_h),
team_a = as.character(team_a))
unplayed_scorelines <- broom::augment(
model, unplayed, type.predict = "scorelines") %>%
unnest(cols = c(.scorelines)) %>%
select(-team_h_score, -team_a_score) %>%
mutate(team_h = as.character(team_h),
team_a = as.character(team_a)) %>%
left_join(teams %>% select(id, home_name = name),
by = c('team_h' = 'id')) %>%
left_join(teams %>% select(id, away_name = name),
by = c('team_a' = 'id'))
View(unplayed_scorelines)
unplayed_scorelines <- broom::augment(
model, unplayed, type.predict = "scorelines") %>%
unnest(cols = c(.scorelines)) %>%
select(-team_h_score, -team_a_score) %>%
mutate(team_h = as.character(team_h),
team_a = as.character(team_a))
View(unplayed_scorelines)
unplayed_scorelines <- broom::augment(
model, unplayed, type.predict = "scorelines")
View(unplayed_scorelines)
View(unplayed_scorelines[[6]][[1]])
unplayed_scorelines <- broom::augment(
model, unplayed, type.predict = "scorelines") %>%
unnest(cols = c(.scorelines))
View(unplayed_scorelines)
unplayed_scorelines <- broom::augment(
model, unplayed, type.predict = "scorelines")
df <- data.frame(id = 1:1000,
data = sample(300:500, 1000, replace=TRUE),
check.names = FALSE)
View(df)
goal <- players %>%
filter(position == 'Goalkeeper') %>%
mutate(selected_by_percent = selected_by_percent / 100)
goal <- goal %>%
filter(minutes > 450)
goal_small <- goal %>%
top_n(n = 5, wt = points_per_game)
gg <- ggplot(goal, aes(now_cost, points_per_game)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = 'lm',
se = FALSE, size = 1,
color = '#434f67') +
labs(title = 'GoalKeeper Value',
subtitle = 'The Grey Line Represents the Expected Points Per Game \nfor players at that price tag',
y = 'Avg Points Per Game', x = 'Cost') +
theme_clean_light()
gg + geom_label_repel(data = goal_small,
aes(now_cost, points_per_game,
label = web_name),
size = 4)
def <- players %>%
filter(position == 'Defence') %>%
mutate(selected_by_percent = selected_by_percent / 100)
def <- def %>%
filter(minutes > 450)
def_small <- def %>%
top_n(n = 10, wt = points_per_game)
gg <- ggplot(def, aes(now_cost, points_per_game)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = 'lm',
se = FALSE, size = 1,
color = '#434f67') +
labs(title = 'Defence Value',
subtitle = 'The Grey Line Represents the Expected Points Per Game \nfor players at that price tag',
y = 'Avg Points Per Game', x = 'Cost') +
theme_clean_light()
gg + geom_label_repel(data = def_small,
aes(now_cost, points_per_game, label = web_name),
size = 4)
goal <- players %>%
filter(position == 'Goalkeeper') %>%
mutate(selected_by_percent = selected_by_percent / 100)
goal <- goal %>%
filter(minutes > 450)
goal_small <- goal %>%
top_n(n = 5, wt = points_per_game)
gg <- ggplot(goal, aes(now_cost, points_per_game)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = 'lm',
se = FALSE, size = 1,
color = '#434f67') +
labs(title = 'GoalKeeper Value',
subtitle = 'The Grey Line Represents the Expected Points Per Game \nfor players at that price tag',
y = 'Avg Points Per Game', x = 'Cost') +
theme_clean_light()
gg + geom_label_repel(data = goal_small,
aes(now_cost, points_per_game,
label = web_name),
size = 4)
mid <- players %>%
filter(position == 'Midfield') %>%
mutate(selected_by_percent = selected_by_percent / 100)
mid <- mid %>%
filter(minutes > 450)
mid_small <- mid %>%
top_n(n = 10, wt = points_per_game)
gg <- ggplot(mid, aes(now_cost, points_per_game)) +
geom_point(alpha = .7, size = 3) +
geom_smooth(method = 'lm',
se = FALSE, size = 1,
color = '#434f67') +
labs(title = 'Midfielder Value',
subtitle = 'The Grey Line Represents the Expected Points Per Game \nfor players at that price tag',
y = 'Avg Points Per Minute', x = 'Cost') +
theme_clean_light()
gg + geom_label_repel(data = mid_small,
aes(now_cost, points_per_game, label = web_name))
attack <- players %>%
filter(position == 'Attack') %>%
mutate(selected_by_percent = selected_by_percent / 100)
attack <- attack %>%
filter(minutes > 450)
attack_small <- attack %>%
top_n(n = 10, wt = points_per_game)
gg <- ggplot(attack, aes(now_cost, points_per_game)) +
geom_point(alpha = .7, size = 3) +
geom_smooth(method = 'lm',
se = FALSE, size = 1,
color = '#434f67') +
labs(title = 'Sttack Value',
subtitle = 'The Grey Line Represents the Expected Points Per Game \nfor players at that price tag',
y = 'Avg Points Per Minute', x = 'Cost') +
theme_clean_light()
gg + geom_label_repel(data = attack_small,
aes(now_cost, points_per_game, label = web_name))
attack <- players %>%
filter(position == 'Attack') %>%
mutate(selected_by_percent = selected_by_percent / 100)
attack <- attack %>%
filter(minutes > 450)
attack_small <- attack %>%
top_n(n = 10, wt = points_per_game)
gg <- ggplot(attack, aes(now_cost, points_per_game)) +
geom_point(alpha = .7, size = 3) +
geom_smooth(method = 'lm',
se = FALSE, size = 1,
color = '#434f67') +
labs(title = 'Attack Value',
subtitle = 'The Grey Line Represents the Expected Points Per Game \nfor players at that price tag',
y = 'Avg Points Per Minute', x = 'Cost') +
theme_clean_light()
gg + geom_label_repel(data = attack_small,
aes(now_cost, points_per_game, label = web_name))
attack <- players %>%
filter(position == 'Attack') %>%
mutate(selected_by_percent = selected_by_percent / 100)
attack <- attack %>%
filter(minutes > 450)
attack_small <- attack %>%
top_n(n = 10, wt = points_per_game)
gg <- ggplot(attack, aes(now_cost, points_per_game)) +
geom_point(alpha = .7, size = 3) +
geom_smooth(method = 'lm',
se = FALSE, size = 1,
color = '#434f67') +
labs(title = 'Forward Value',
subtitle = 'The Grey Line Represents the Expected Points Per Game \nfor players at that price tag',
y = 'Avg Points Per Minute', x = 'Cost') +
theme_clean_light()
gg + geom_label_repel(data = attack_small,
aes(now_cost, points_per_game, label = web_name))
mid <- players %>%
filter(position == 'Midfield') %>%
mutate(selected_by_percent = selected_by_percent / 100)
mid <- mid %>%
filter(minutes > 450)
mid_small <- mid %>%
top_n(n = 10, wt = points_per_game)
gg <- ggplot(mid, aes(now_cost, points_per_game)) +
geom_point(alpha = .7, size = 3) +
geom_smooth(method = 'lm',
se = FALSE, size = 1,
color = '#434f67') +
labs(title = 'Midfielder Value',
subtitle = 'The Grey Line Represents the Expected Points Per Game \nfor players at that price tag',
y = 'Avg Points Per Minute', x = 'Cost') +
theme_clean_light()
gg + geom_label_repel(data = mid_small,
aes(now_cost, points_per_game, label = web_name))
mid <- players %>%
filter(position == 'Midfield') %>%
mutate(selected_by_percent = selected_by_percent / 100)
mid <- mid %>%
filter(minutes > 450)
mid_small <- mid %>%
top_n(n = 10, wt = points_per_game)
gg <- ggplot(mid, aes(now_cost, points_per_game)) +
geom_point(alpha = .7, size = 3) +
geom_smooth(method = 'lm',
se = FALSE, size = 1,
color = '#434f67') +
labs(title = 'Midfield Value',
subtitle = 'The Grey Line Represents the Expected Points Per Game \nfor players at that price tag',
y = 'Avg Points Per Minute', x = 'Cost') +
theme_clean_light()
gg + geom_label_repel(data = mid_small,
aes(now_cost, points_per_game, label = web_name))
def <- players %>%
filter(position == 'Defence') %>%
mutate(selected_by_percent = selected_by_percent / 100)
def <- def %>%
filter(minutes > 450)
def_small <- def %>%
top_n(n = 10, wt = points_per_game)
gg <- ggplot(def, aes(now_cost, points_per_game)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = 'lm',
se = FALSE, size = 1,
color = '#434f67') +
labs(title = 'Defence Value',
subtitle = 'The Grey Line Represents the Expected Points Per Game \nfor players at that price tag',
y = 'Avg Points Per Game', x = 'Cost') +
theme_clean_light()
gg + geom_label_repel(data = def_small,
aes(now_cost, points_per_game, label = web_name),
size = 4)
